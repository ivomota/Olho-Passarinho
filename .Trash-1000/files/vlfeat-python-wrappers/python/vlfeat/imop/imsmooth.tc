{      
  FLT* I_pt   = (FLT*) image.data;                     
  FLT* J_pt   = (FLT*) out->data;                   
  FLT* buffer = (FLT*) malloc (sizeof(FLT) * M*N_) ;              

  switch (kernel) {
    case GAUSSIAN :
    {
      int W = ceil(4 * sigma) ;
      FLT* filt = (FLT*) malloc (sizeof(FLT) * (2*W+1)) ;         
      FLT acc = 0 ;                                                   
      for (j = 0 ; j < 2*W+1 ; ++j) {
        FLT z = (j - W) / (sigma + VL_EPSILON_F) ;
        filt[j] = exp(- 0.5 * z*z) ;
        acc += filt[j] ;                                              
      }                                                               
      for (j = 0 ; j < 2*W+1 ; ++j) {                                 
        filt[j] /= acc ;                                              
      }                                                               
      
      for (k = 0 ; k < K ; ++k) {
        VL_IMCONVCOL (buffer, N_,                                      
                      I_pt, M, N, M,                                  
                      filt, -W, W, subsample, flags) ;                
        VL_IMCONVCOL (J_pt, M_,                                       
                      buffer, N_, M, N_,
                      filt, -W, W, subsample, flags) ;
        I_pt += M*N ;
        J_pt += M_*N_ ;
      }
      free (filt) ;
      break ;
    }
      
    case TRIANGULAR:
    {
      sigma = VL_MAX(sigma, 1) ;
      for (k = 0 ; k < K ; ++k) {                                 
        VL_IMCONVCOLTRI (buffer, N_,                                      
                         I_pt, M, N, M,                                  
                         sigma, subsample, flags) ;                
        VL_IMCONVCOLTRI (J_pt, M_,                                       
                         buffer, N_, M, N_,
                         sigma, subsample, flags) ;
        I_pt += M*N ;
        J_pt += M_*N_ ;
      }
      break ;
    }
      
    default:
      assert (0) ;
      break ;
  }
  free (buffer) ;
}
